{"version":3,"sources":["MasterContext.js","Buttons.js","Power.js","Volume.js","Display.js","Bank.js","Controls.js","Machine.js","App.js","reportWebVitals.js","index.js"],"names":["GlobalStateContext","React","createContext","DispatchContext","ACTIONS","MasterProvider","children","kit1","displayText","buttonList","letter","url","kit2","useReducer","state","action","type","isPowerOn","currentVolume","payload","kitOneIsActive","drumKitData","isPlaying","dispatch","Provider","value","Buttons","useContext","buttonRef","useRef","audioRef","keyEventCodeRegex","buttonHover","e","showInstrument","index","target","id","style","backgroundColor","buttonExit","handleAudioClick","clickAudio","refIndex","current","play","paused","currentTime","border","attributes","nodeValue","src","console","log","handleAudioKeyDown","audioTap","pause","test","code","makeButtonGray","returnStyles","btnIndex","buttonStyle","borderBottom","borderRight","borderTop","borderLeft","useEffect","activeAudio","filter","audio","ended","forEach","stopSound","volume","window","addEventListener","removeEventListener","aria-label","map","btn","ref","dpad","onMouseDown","onMouseOver","onMouseUp","mouseUpReturnStyles","onMouseOut","onFocus","onBlur","className","tabIndex","ele","preload","Power","powerButtonLabel","aria-live","onClick","icon","faPowerOff","aria-hidden","Volume","htmlFor","aria-labelledby","name","min","max","onInput","toFixed","Display","Bank","title","Controls","Machine","App","faMusic","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cf2a31a7.chunk.js","sourcesContent":["import React, { useRef, useReducer } from 'react';\r\n\r\nexport const GlobalStateContext = React.createContext();\r\nexport const DispatchContext = React.createContext();\r\n\r\n//custom hooks to export refs to Buttons & other components\r\n\r\nexport function useAudioRef(){\r\n    return useRef([]);\r\n\r\n}\r\n\r\nexport function useButtonRef(){\r\n    return useRef([]);\r\n\r\n}\r\n\r\n\r\nexport const ACTIONS = {\r\n    TOGGLE_POWER: \"togglePower\",\r\n    CHANGE_VOLUME: \"changeVolume\",\r\n    TOGGLE_BANK: \"toggleBank\",\r\n    CHANGE_DISPLAY: \"changeDisplay\"\r\n}\r\n\r\nexport default function MasterProvider( { children } ){\r\n    \r\n    const kit1 = { displayText: \"Heater Kit\", buttonList: [{letter: \"Q\", displayText: \"Heater 1\", url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\"}, {letter: \"W\", displayText: \"Heater 2\", url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\"}, {letter: \"E\", displayText: \"Heater 3\", url:\"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\"}, {letter: \"A\", displayText: \"Heater 4\", url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\"}, {letter: \"S\", displayText: \"Clap\", url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\"}, {letter: \"D\", displayText: \"Open Hi-Hat\", url: \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\"}, {letter: \"Z\", displayText: \"Kick n' Hat\", url: \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\"}, {letter: \"X\", displayText: \"Kick\", url: \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\"}, {letter: \"C\", displayText: \"Closed Hi-Hat\", url: \"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\"}]};\r\n\r\n    const kit2 = {displayText: \"Smooth Piano Kit\", buttonList: [{letter: \"Q\", displayText: \"Chord 1\", url: \"https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3\"}, {letter: \"W\", displayText: \"Chord 2\", url: \"https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3\"}, {letter: \"E\", displayText: \"Chord 3\", url:\"https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3\"}, {letter: \"A\", displayText: \"Shaker\", url: \"https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3\"}, {letter: \"S\", displayText: \"Open Hi-Hat\", url: \"https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3\"}, {letter: \"D\", displayText: \"Closed Hi-Hat\", url: \"https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3\"}, {letter: \"Z\", displayText: \"Punchy Kick\", url: \"https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3\"}, {letter: \"X\", displayText: \"Side Stick\", url: \"https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3\"}, {letter: \"C\", displayText: \"Snare\", url: \"https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3\"}]};\r\n\r\n\r\nconst [state, dispatch] = useReducer(reducer, {isPowerOn: true, currentVolume: 0.5, kitOneIsActive: true, isPlaying: false, drumKitData: kit1, displayText: kit1.displayText});\r\n\r\n\r\nfunction reducer(state, action){\r\n\r\n    switch(action.type) {\r\n\r\n        case ACTIONS.TOGGLE_POWER:\r\n        return {...state, isPowerOn: !state.isPowerOn}\r\n        \r\n        case ACTIONS.CHANGE_VOLUME:\r\n        return {...state, currentVolume: action.payload}\r\n        \r\n        case ACTIONS.TOGGLE_BANK:\r\n        return {...state, kitOneIsActive: !state.kitOneIsActive, drumKitData: state.kitOneIsActive === true ? kit2 : kit1, displayText: state.kitOneIsActive === true ? kit2.displayText: kit1.displayText}\r\n\r\n        case ACTIONS.CHANGE_DISPLAY:\r\n        return {...state, displayText: action.payload}\r\n\r\n        default:\r\n        return state;\r\n    }\r\n}\r\n\r\n\r\nreturn(\r\n\r\n        <GlobalStateContext.Provider value={state}>\r\n            <DispatchContext.Provider value={dispatch}>\r\n                {children}\r\n            </DispatchContext.Provider>\r\n        </GlobalStateContext.Provider>\r\n);\r\n\r\n}\r\n\r\n\r\n","import React, { useEffect, useContext} from 'react';\r\nimport './Buttons.css';\r\nimport { ACTIONS, DispatchContext, GlobalStateContext, useAudioRef, useButtonRef } from './MasterContext';\r\n\r\n\r\n\r\n\r\nfunction Buttons(){\r\n\r\nconst state = useContext(GlobalStateContext);\r\nconst dispatch = useContext(DispatchContext);\r\nconst buttonRef = useButtonRef();\r\nconst audioRef = useAudioRef();\r\nconst keyEventCodeRegex = /^(Key)[Q|W|E|A|S|D|Z|X|C]/;\r\n\r\n\r\n    function buttonHover(e){\r\n        if(state.isPowerOn){\r\n            function showInstrument(index){\r\n                dispatch({type: ACTIONS.CHANGE_DISPLAY, payload: state.drumKitData.buttonList[index].displayText});\r\n            }\r\n            switch(e.target.id){   \r\n                case \"Q\":\r\n                showInstrument(0);\r\n                break;\r\n                case \"W\":\r\n                showInstrument(1);\r\n                break;\r\n                case \"E\":\r\n                showInstrument(2);\r\n                break;\r\n                case \"A\":\r\n                showInstrument(3);\r\n                break;\r\n                case \"S\":\r\n                showInstrument(4);\r\n                break;\r\n                case \"D\":\r\n                showInstrument(5);\r\n                break;\r\n                case \"Z\":\r\n                showInstrument(6);\r\n                break;\r\n                case \"X\":\r\n                showInstrument(7);\r\n                break;\r\n                case \"C\":\r\n                showInstrument(8);\r\n                break;\r\n                default:\r\n                break;\r\n                \r\n            }\r\n        return e.target.style.backgroundColor = \"rgb(0, 230, 0)\";\r\n        } else{\r\n            return null;\r\n        }\r\n    \r\n    }\r\n    \r\n    function buttonExit(e){\r\n\r\n        dispatch({type: ACTIONS.CHANGE_DISPLAY, payload: state.drumKitData.displayText});\r\n    return e.target.style.backgroundColor = \"gray\";\r\n    }\r\n\r\n     \r\n    //Will make the sound stop if power is switched off during playback\r\n    useEffect(()=>{\r\n        var activeAudio = audioRef.current.filter((audio)=>audio.ended === false);\r\n\r\n        if (state.isPowerOn === false){\r\n            function stopSound(audio){\r\n                audio.pause();\r\n                audio.currentTime = 0;\r\n            }\r\n        activeAudio.forEach((audio)=>stopSound(audio));\r\n        } else {\r\n            return null;\r\n        }\r\n\r\n    }, [state.isPowerOn, audioRef]);\r\n\r\n    //Will change volume dynamically as sound plays, & not just before playback\r\n    useEffect(()=>{\r\n        audioRef.current.forEach((audio)=>audio.volume = state.currentVolume);\r\n\r\n    }, [state.currentVolume, audioRef])\r\n\r\n\r\n    function handleAudioClick(e) {\r\n\r\n        e.target.style.border=\"solid 1px black\";\r\n    \r\n        function clickAudio(refIndex){\r\n            dispatch({type: ACTIONS.CHANGE_DISPLAY, payload: state.drumKitData.buttonList[refIndex].displayText})\r\n            audioRef.current[refIndex].play();\r\n            \r\n            //on another click\r\n            if (!audioRef.current[refIndex].paused) { \r\n              audioRef.current[refIndex].currentTime = 0;\r\n               audioRef.current[refIndex].play(); \r\n                }\r\n            }\r\n\r\n        if(state.isPowerOn){\r\n            const clickedSound = e.target.children[0].attributes[0].nodeValue;\r\n    \r\n        switch(clickedSound){\r\n            case audioRef.current[0].src:\r\n            clickAudio(0);\r\n            break;\r\n\r\n            case audioRef.current[1].src:\r\n            clickAudio(1);\r\n            break;\r\n\r\n            case audioRef.current[2].src:\r\n            clickAudio(2);\r\n            break;\r\n\r\n            case audioRef.current[3].src:\r\n            clickAudio(3);\r\n            break;\r\n\r\n            case audioRef.current[4].src:\r\n            clickAudio(4);\r\n            break;\r\n\r\n            case audioRef.current[5].src:\r\n            clickAudio(5);\r\n            break;\r\n\r\n            case audioRef.current[6].src:\r\n            clickAudio(6);\r\n            break;\r\n\r\n            case audioRef.current[7].src:\r\n            clickAudio(7);\r\n            break;\r\n\r\n            case audioRef.current[8].src:\r\n            clickAudio(8);\r\n            break;\r\n\r\n            default:\r\n            return null;\r\n            }\r\n        } else {\r\n            console.log(\"power is off.\");\r\n        }    \r\n    }\r\n\r\n    const mouseUpReturnStyles = (index) => {\r\n       \r\n      let buttonStyle = buttonRef.current[index].style;\r\n      buttonStyle.borderBottom = \"solid 3px #505050\";\r\n      buttonStyle.borderRight = \"solid 3px #404040\";\r\n      buttonStyle.borderTop = \"solid 3px rgb(227, 227, 227)\";\r\n      buttonStyle.borderLeft = \"solid 3px rgb(227, 227, 227)\";\r\n      }\r\n\r\n      \r\n\r\nfunction handleAudioKeyDown(e) {\r\n\r\n        function audioTap(refIndex) {\r\n            if(state.isPowerOn===true){\r\n            dispatch({\r\n              type: ACTIONS.CHANGE_DISPLAY,\r\n              payload: state.drumKitData.buttonList[refIndex].displayText\r\n            });\r\n            buttonRef.current[refIndex].style.backgroundColor = \"rgb(0, 230, 0)\";\r\n            buttonRef.current[refIndex].style.border = \"solid 1px black\";\r\n            audioRef.current[refIndex].play();\r\n            //on another tap of same key:\r\n            if (!audioRef.current[refIndex].paused && audioRef.current[refIndex].currentTime > 0) {\r\n           \r\n            audioRef.current[refIndex].pause();       \r\n            audioRef.current[refIndex].currentTime = 0;\r\n            audioRef.current[refIndex].play();\r\n            }\r\n          } else if (state.isPowerOn===false){\r\n            buttonRef.current[refIndex].style.border = \"solid 1px black\";\r\n            } else {\r\n                return null;\r\n            } \r\n            \r\n\r\n        }\r\n\r\n        if(keyEventCodeRegex.test(e.code)){\r\n            \r\n            switch(e.code){\r\n                case \"KeyQ\":\r\n                audioTap(0);\r\n                break;\r\n\r\n                case \"KeyW\":\r\n                audioTap(1);\r\n                break;\r\n\r\n                case \"KeyE\":\r\n                audioTap(2);\r\n                break;\r\n\r\n                case \"KeyA\":\r\n                audioTap(3);\r\n                break;\r\n\r\n                case \"KeyS\":\r\n                audioTap(4);\r\n                break;\r\n\r\n                case \"KeyD\":\r\n                audioTap(5);\r\n                break;\r\n\r\n                case \"KeyZ\":\r\n                audioTap(6);\r\n                break;\r\n                case \"KeyX\":\r\n                audioTap(7);\r\n                break;\r\n\r\n                case \"KeyC\":\r\n                audioTap(8);\r\n                break;\r\n\r\n                default:\r\n                return null;\r\n                }\r\n\r\n            } else {\r\n                return null;\r\n            }\r\n}\r\n\r\n\r\nuseEffect(() => {\r\n   \r\n    window.addEventListener('keydown', handleAudioKeyDown);\r\n\r\n    return ()=> {window.removeEventListener('keydown', handleAudioKeyDown)};\r\n/*all dependencies of this effect are the same state values used in the handleAudioKeyDown function above*/\r\n// eslint-disable-next-line react-hooks/exhaustive-deps\r\n}, [state.isPowerOn, state.kitOneIsActive, state.drumKitData]);\r\n\r\nfunction makeButtonGray(e){\r\n\r\n    const returnStyles = (btnIndex) => {\r\n        let buttonStyle = buttonRef.current[btnIndex].style;\r\n  \r\n        buttonStyle.backgroundColor = \"gray\";\r\n        buttonStyle.borderBottom = \"solid 3px #505050\";\r\n        buttonStyle.borderRight = \"solid 3px #404040\";\r\n        buttonStyle.borderTop = \"solid 3px rgb(227, 227, 227)\";\r\n        buttonStyle.borderLeft = \"solid 3px rgb(227, 227, 227)\";\r\n      };\r\n\r\n        if(keyEventCodeRegex.test(e.code)){\r\n        switch(e.code){\r\n        case \"KeyQ\":\r\n          returnStyles(0);\r\n          break;\r\n        case \"KeyW\":\r\n          returnStyles(1);\r\n          break;\r\n        case \"KeyE\":\r\n          returnStyles(\r\n            2\r\n          );\r\n          break;\r\n        case \"KeyA\":\r\n          returnStyles(3);\r\n          break;\r\n        case \"KeyS\":\r\n          returnStyles(4);\r\n          break;\r\n        case \"KeyD\":\r\n          returnStyles(5);\r\n          break;\r\n        case \"KeyZ\":\r\n          returnStyles(6);\r\n          break;\r\n        case \"KeyX\":\r\n          returnStyles(7);\r\n          break;\r\n        case \"KeyC\":\r\n          returnStyles(8);\r\n          break;\r\n        default:\r\n          return null;\r\n            }\r\n        }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n\r\nuseEffect(() => {\r\n    window.addEventListener(\"keyup\", makeButtonGray);\r\n\r\n   return ()=>{window.removeEventListener(\"keyup\", makeButtonGray)}\r\n\r\n});\r\n\r\n\r\nreturn(\r\n\r\n<div id=\"button-container\" aria-label=\"Nine drum pad buttons. Press Q, W, E, A, S, D, Z, X, or C.\">\r\n    {state.drumKitData.buttonList.map((btn, index) => <button key={btn.letter} ref={dpad => buttonRef.current[index] = dpad} aria-label={state.isPowerOn ? state.drumKitData.buttonList[index].displayText + \", or press '\" + btn.letter + \".'\" : state.drumKitData.buttonList[index].displayText + \". Power is off\"} onMouseDown={handleAudioClick} onMouseOver={state.isPowerOn ? buttonHover : null} onMouseUp={()=>mouseUpReturnStyles(index)} onMouseOut={buttonExit} onFocus={buttonHover} onBlur={buttonExit} className=\"drum-pad\" tabIndex={0} id={btn.letter}>{btn.letter}\r\n        <audio ref={ele => audioRef.current[index] = ele} src={btn.url} preload=\"true\" />\r\n    </button>)}\r\n</div>\r\n);\r\n\r\n}\r\n\r\nexport default Buttons;","import React, { useContext } from 'react';\r\nimport './Power.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPowerOff } from '@fortawesome/free-solid-svg-icons';\r\nimport { ACTIONS, DispatchContext, GlobalStateContext} from './MasterContext';\r\n\r\n\r\n\r\n\r\nexport default function Power(){\r\n\r\n  const state = useContext(GlobalStateContext);\r\n  const dispatch = useContext(DispatchContext);\r\n\r\n  var powerButtonLabel = state.isPowerOn ? \"Power button. Power is switched on.\" : \"Power button. Power is switched off.\"\r\n\r\nfunction switchPower(){\r\n  dispatch({type: ACTIONS.TOGGLE_POWER});\r\n}\r\n\r\n\r\n    return (\r\n        <div id=\"power\">\r\n            <button aria-label={powerButtonLabel} aria-live=\"polite\" className={state.isPowerOn ? \"power-on\" : \"power-off\"} id=\"power-button\" onClick={switchPower}>\r\n              <FontAwesomeIcon icon={faPowerOff} aria-hidden=\"true\" />\r\n            </button>\r\n        </div>\r\n        );\r\n\r\n\r\n}","import React, { useContext } from 'react';\r\nimport './Volume.css';\r\nimport { ACTIONS, DispatchContext } from './MasterContext';\r\n\r\n\r\n\r\n\r\nexport default function Volume(){\r\n\r\n  const dispatch = useContext(DispatchContext);\r\n\r\n\r\n  function changeVolume(e){\r\n\r\n    let currentVolume = (e.target.value / 100).toFixed(2);\r\n    dispatch({type: ACTIONS.CHANGE_VOLUME, payload: currentVolume})\r\n    \r\n};\r\n\r\n    return (\r\n        <div id=\"volume\">\r\n          <label htmlFor=\"volume-switch\" id=\"volume-switch-label\">Volume</label>\r\n          <input aria-labelledby=\"volume-switch-label\"\r\n            id=\"volume-switch\"\r\n            name=\"volume-switch\"\r\n            type=\"range\"\r\n            min=\"0\"\r\n            max=\"100\"\r\n            onInput={changeVolume}\r\n          ></input>\r\n        </div>\r\n      );\r\n}\r\n\r\n","import React, { useContext } from 'react';\r\nimport './Display.css';\r\nimport { GlobalStateContext} from './MasterContext';\r\n\r\n\r\n\r\nexport default function Display(){\r\n\r\nconst state = useContext(GlobalStateContext);\r\n\r\n\r\n\r\n\r\nreturn ( \r\n    <div id=\"display\"tabIndex={0} aria-label={state.isPowerOn ? \"Display screen says: \" + state.displayText +\".\": \"Empty display screen.\"}>\r\n      <p>{state.isPowerOn ? state.displayText : \" \"}</p>\r\n    </div>\r\n  );\r\n}","import React, { useContext } from 'react';\r\nimport './Bank.css';\r\nimport { ACTIONS, DispatchContext, GlobalStateContext } from './MasterContext';\r\n\r\n\r\nexport default function Bank(){\r\n  \r\nconst state = useContext(GlobalStateContext);\r\nconst dispatch = useContext(DispatchContext);\r\n\r\n  return (\r\n    <div id=\"bank\">\r\n      <div title=\"switch sound bank\" id=\"bank-switch-holder\" onClick={()=>dispatch({type: ACTIONS.TOGGLE_BANK})}>\r\n        <input type=\"button\" aria-label={state.isPowerOn ? state.drumKitData.displayText +\" is active. Switch sound bank.\" : \"Switch sound bank. Power is off.\"} className={state.kitOneIsActive ? \"switched\" : null } id=\"bank-switch\"></input>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport './Controls.css';\r\nimport Power from './Power';\r\nimport Volume from './Volume';\r\nimport Display from './Display';\r\nimport Bank from './Bank';\r\n\r\nexport default function Controls () {\r\n  \r\n      return (\r\n        <div id=\"controls\">\r\n          <Power />\r\n          <Volume />\r\n          <Display />\r\n          <Bank />\r\n        </div>\r\n      );\r\n  }","import React from 'react';\r\nimport './Machine.css';\r\nimport Buttons from './Buttons';\r\nimport Controls from './Controls';\r\n\r\nexport default function Machine() {\r\n\r\n  return (\r\n    <div id=\"drum-machine\">      \r\n        <Buttons />\r\n        <Controls />\r\n    </div>\r\n  )\r\n}","\r\nimport './App.css';\r\nimport React from 'react';\r\nimport Machine from './Machine';\r\nimport MasterProvider from './MasterContext';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMusic } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <MasterProvider>\r\n    <div className=\"App\">\r\n      <h1>Drum Pad <sup><FontAwesomeIcon icon={faMusic} id=\"music-notes\" aria-hidden=\"true\" /></sup></h1>\r\n      <Machine />\r\n    </div>\r\n    </MasterProvider> \r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}